/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * elegirZombies.java
 *
 * Created on 18-may-2011, 19:08:40
 */

package plantasvszombies;

import java.awt.Graphics;
import java.io.IOException;
import java.util.ArrayList;
import java.util.ListIterator;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;

/**
 *
 * @author francis
 */
public class elegirZombies extends javax.swing.JFrame {
    
    private ArrayList arrayZombies = new ArrayList();
    private int cantidadZombies = 0, numeroZombiesElegidos = 0;
    private ImageIcon zombie = new ImageIcon("imagenes/Zombies/zombieNormal.jpg");
    private ImageIcon zombieCono = new ImageIcon("imagenes/Zombies/zombieCono.jpg");
    private ImageIcon zombieCubo = new ImageIcon("imagenes/Zombies/zombieCubo.jpg");
    private ImageIcon zombiePuerta = new ImageIcon("imagenes/Zombies/zombiePuerta.jpg");
    private ImageIcon zombieLanza = new ImageIcon("imagenes/Zombies/zombieLanza.jpg");
    private ImageIcon zombieRugby = new ImageIcon("imagenes/Zombies/zombieRugby.jpg");
    private ImageIcon zombieLoco = new ImageIcon("imagenes/Zombies/zombieLoco.jpg");
    private ImageIcon zombieGlobo = new ImageIcon("imagenes/Zombies/zombieGlobo.jpg");
    private ImageIcon zombieCatapulta = new ImageIcon("imagenes/Zombies/zombieCatapulta.jpg");
    private ImageIcon zombieYeti = new ImageIcon("imagenes/Zombies/zombieYeti.jpg");
    private ImageIcon zombieGigante = new ImageIcon("imagenes/Zombies/zombieGigante.jpg");
    private ImageIcon zombieMinero = new ImageIcon("imagenes/Zombies/zombieMinero.jpg");
    private ImageIcon zombiePeriodico = new ImageIcon("imagenes/Zombies/zombiePeriodico.jpg");

    @Override
    public void paint(Graphics g)
    {
        super.paintComponents(g);
        g = panelZombieNormal.getGraphics();
        g.drawImage(zombie.getImage(), 0, 0, zombie.getIconWidth(), zombie.getIconHeight(), this);
        g = panelZombieCono.getGraphics();
        g.drawImage(zombieCono.getImage(), 0, 0, zombieCono.getIconWidth(), zombieCono.getIconHeight(), this);
        g = panelZombieCubo.getGraphics();
        g.drawImage(zombieCubo.getImage(), 0, 0, zombieCubo.getIconWidth(), zombieCubo.getIconHeight(), this);
        g = panelZombiePuerta.getGraphics();
        g.drawImage(zombiePuerta.getImage(), 0, 0, zombiePuerta.getIconWidth(), zombiePuerta.getIconHeight(), this);
        g = panelZombieLanza.getGraphics();
        g.drawImage(zombieLanza.getImage(), 0, 0, zombieLanza.getIconWidth(), zombieLanza.getIconHeight(), this);
        g = panelZombieLoco.getGraphics();
        g.drawImage(zombieLoco.getImage(), 0, 0, zombieLoco.getIconWidth(), zombieLoco.getIconHeight(), this);
        g = panelZombieGlobo.getGraphics();
        g.drawImage(zombieGlobo.getImage(), 0, 0, zombieGlobo.getIconWidth(), zombieGlobo.getIconHeight(), this);
        g = panelZombieMinero.getGraphics();
        g.drawImage(zombieMinero.getImage(), 0, 0, zombieMinero.getIconWidth(), zombieMinero.getIconHeight(), this);
        g = panelZombieYeti.getGraphics();
        g.drawImage(zombieYeti.getImage(), 0, 0, zombieYeti.getIconWidth(), zombieYeti.getIconHeight(), this);
        g = panelZombieGigante.getGraphics();
        g.drawImage(zombieGigante.getImage(), 0, 0, zombieGigante.getIconWidth(), zombieGigante.getIconHeight(), this);
        g = panelZombieCatapulta.getGraphics();
        g.drawImage(zombieCatapulta.getImage(), 0, 0, zombieCatapulta.getIconWidth(), zombieCatapulta.getIconHeight(), this);
        g = panelZombiePeriodico.getGraphics();
        g.drawImage(zombiePeriodico.getImage(), 0, 0, zombiePeriodico.getIconWidth(), zombiePeriodico.getIconHeight(), this);
        g = panelZombieRugby.getGraphics();
        g.drawImage(zombieRugby.getImage(), 0, 0, zombieRugby.getIconWidth(), zombieRugby.getIconHeight(), this);
    }
    /** Creates new form elegirZombies */
    public elegirZombies() {
        initComponents();
        this.setDefaultCloseOperation(this.DISPOSE_ON_CLOSE);
    }

    public elegirZombies(ArrayList zombies) throws LineUnavailableException, IOException, UnsupportedAudioFileException {
        arrayZombies = zombies;
        initComponents();
        this.setDefaultCloseOperation(this.DISPOSE_ON_CLOSE);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelZombieNormal = new javax.swing.JPanel();
        panelZombieCono = new javax.swing.JPanel();
        panelZombieCubo = new javax.swing.JPanel();
        panelZombiePeriodico = new javax.swing.JPanel();
        panelZombiePuerta = new javax.swing.JPanel();
        panelZombieLanza = new javax.swing.JPanel();
        panelZombieLoco = new javax.swing.JPanel();
        panelZombieGlobo = new javax.swing.JPanel();
        panelZombieMinero = new javax.swing.JPanel();
        panelZombieYeti = new javax.swing.JPanel();
        panelZombieGigante = new javax.swing.JPanel();
        panelZombieCatapulta = new javax.swing.JPanel();
        panelZombieRugby = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        textoCantidadTiposZombies = new javax.swing.JTextField();
        botonEmpezar = new javax.swing.JButton();
        scrollAreaElegirZombies = new javax.swing.JScrollPane();
        areaZombiesElegidos = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        panelZombieNormal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelZombieNormal.setMaximumSize(new java.awt.Dimension(10000, 10000));
        panelZombieNormal.setMinimumSize(new java.awt.Dimension(1000, 1000));
        panelZombieNormal.setPreferredSize(new java.awt.Dimension(1000, 1000));
        panelZombieNormal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelZombieNormalMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelZombieNormalLayout = new javax.swing.GroupLayout(panelZombieNormal);
        panelZombieNormal.setLayout(panelZombieNormalLayout);
        panelZombieNormalLayout.setHorizontalGroup(
            panelZombieNormalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
        );
        panelZombieNormalLayout.setVerticalGroup(
            panelZombieNormalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 98, Short.MAX_VALUE)
        );

        panelZombieCono.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelZombieCono.setMaximumSize(new java.awt.Dimension(1000, 1000));
        panelZombieCono.setMinimumSize(new java.awt.Dimension(1000, 1000));
        panelZombieCono.setPreferredSize(new java.awt.Dimension(1000, 1000));
        panelZombieCono.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelZombieConoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelZombieConoLayout = new javax.swing.GroupLayout(panelZombieCono);
        panelZombieCono.setLayout(panelZombieConoLayout);
        panelZombieConoLayout.setHorizontalGroup(
            panelZombieConoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 57, Short.MAX_VALUE)
        );
        panelZombieConoLayout.setVerticalGroup(
            panelZombieConoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 98, Short.MAX_VALUE)
        );

        panelZombieCubo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelZombieCubo.setPreferredSize(new java.awt.Dimension(62, 100));
        panelZombieCubo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelZombieCuboMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelZombieCuboLayout = new javax.swing.GroupLayout(panelZombieCubo);
        panelZombieCubo.setLayout(panelZombieCuboLayout);
        panelZombieCuboLayout.setHorizontalGroup(
            panelZombieCuboLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );
        panelZombieCuboLayout.setVerticalGroup(
            panelZombieCuboLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 98, Short.MAX_VALUE)
        );

        panelZombiePeriodico.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelZombiePeriodico.setPreferredSize(new java.awt.Dimension(75, 100));
        panelZombiePeriodico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelZombiePeriodicoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelZombiePeriodicoLayout = new javax.swing.GroupLayout(panelZombiePeriodico);
        panelZombiePeriodico.setLayout(panelZombiePeriodicoLayout);
        panelZombiePeriodicoLayout.setHorizontalGroup(
            panelZombiePeriodicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 73, Short.MAX_VALUE)
        );
        panelZombiePeriodicoLayout.setVerticalGroup(
            panelZombiePeriodicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 98, Short.MAX_VALUE)
        );

        panelZombiePuerta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelZombiePuerta.setPreferredSize(new java.awt.Dimension(76, 100));
        panelZombiePuerta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelZombiePuertaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelZombiePuertaLayout = new javax.swing.GroupLayout(panelZombiePuerta);
        panelZombiePuerta.setLayout(panelZombiePuertaLayout);
        panelZombiePuertaLayout.setHorizontalGroup(
            panelZombiePuertaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 74, Short.MAX_VALUE)
        );
        panelZombiePuertaLayout.setVerticalGroup(
            panelZombiePuertaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 98, Short.MAX_VALUE)
        );

        panelZombieLanza.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelZombieLanza.setPreferredSize(new java.awt.Dimension(75, 100));
        panelZombieLanza.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelZombieLanzaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelZombieLanzaLayout = new javax.swing.GroupLayout(panelZombieLanza);
        panelZombieLanza.setLayout(panelZombieLanzaLayout);
        panelZombieLanzaLayout.setHorizontalGroup(
            panelZombieLanzaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 73, Short.MAX_VALUE)
        );
        panelZombieLanzaLayout.setVerticalGroup(
            panelZombieLanzaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 98, Short.MAX_VALUE)
        );

        panelZombieLoco.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelZombieLoco.setPreferredSize(new java.awt.Dimension(80, 100));
        panelZombieLoco.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelZombieLocoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelZombieLocoLayout = new javax.swing.GroupLayout(panelZombieLoco);
        panelZombieLoco.setLayout(panelZombieLocoLayout);
        panelZombieLocoLayout.setHorizontalGroup(
            panelZombieLocoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 78, Short.MAX_VALUE)
        );
        panelZombieLocoLayout.setVerticalGroup(
            panelZombieLocoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 98, Short.MAX_VALUE)
        );

        panelZombieGlobo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelZombieGlobo.setPreferredSize(new java.awt.Dimension(60, 100));
        panelZombieGlobo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelZombieGloboMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelZombieGloboLayout = new javax.swing.GroupLayout(panelZombieGlobo);
        panelZombieGlobo.setLayout(panelZombieGloboLayout);
        panelZombieGloboLayout.setHorizontalGroup(
            panelZombieGloboLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 58, Short.MAX_VALUE)
        );
        panelZombieGloboLayout.setVerticalGroup(
            panelZombieGloboLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 98, Short.MAX_VALUE)
        );

        panelZombieMinero.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelZombieMinero.setPreferredSize(new java.awt.Dimension(70, 100));
        panelZombieMinero.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelZombieMineroMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelZombieMineroLayout = new javax.swing.GroupLayout(panelZombieMinero);
        panelZombieMinero.setLayout(panelZombieMineroLayout);
        panelZombieMineroLayout.setHorizontalGroup(
            panelZombieMineroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
        );
        panelZombieMineroLayout.setVerticalGroup(
            panelZombieMineroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 98, Short.MAX_VALUE)
        );

        panelZombieYeti.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelZombieYeti.setPreferredSize(new java.awt.Dimension(92, 145));
        panelZombieYeti.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelZombieYetiMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelZombieYetiLayout = new javax.swing.GroupLayout(panelZombieYeti);
        panelZombieYeti.setLayout(panelZombieYetiLayout);
        panelZombieYetiLayout.setHorizontalGroup(
            panelZombieYetiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 90, Short.MAX_VALUE)
        );
        panelZombieYetiLayout.setVerticalGroup(
            panelZombieYetiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 143, Short.MAX_VALUE)
        );

        panelZombieGigante.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelZombieGigante.setPreferredSize(new java.awt.Dimension(58, 100));
        panelZombieGigante.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelZombieGiganteMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelZombieGiganteLayout = new javax.swing.GroupLayout(panelZombieGigante);
        panelZombieGigante.setLayout(panelZombieGiganteLayout);
        panelZombieGiganteLayout.setHorizontalGroup(
            panelZombieGiganteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 56, Short.MAX_VALUE)
        );
        panelZombieGiganteLayout.setVerticalGroup(
            panelZombieGiganteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 98, Short.MAX_VALUE)
        );

        panelZombieCatapulta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelZombieCatapulta.setPreferredSize(new java.awt.Dimension(123, 100));
        panelZombieCatapulta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelZombieCatapultaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelZombieCatapultaLayout = new javax.swing.GroupLayout(panelZombieCatapulta);
        panelZombieCatapulta.setLayout(panelZombieCatapultaLayout);
        panelZombieCatapultaLayout.setHorizontalGroup(
            panelZombieCatapultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 121, Short.MAX_VALUE)
        );
        panelZombieCatapultaLayout.setVerticalGroup(
            panelZombieCatapultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 98, Short.MAX_VALUE)
        );

        panelZombieRugby.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelZombieRugby.setPreferredSize(new java.awt.Dimension(86, 100));
        panelZombieRugby.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelZombieRugbyMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelZombieRugbyLayout = new javax.swing.GroupLayout(panelZombieRugby);
        panelZombieRugby.setLayout(panelZombieRugbyLayout);
        panelZombieRugbyLayout.setHorizontalGroup(
            panelZombieRugbyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 84, Short.MAX_VALUE)
        );
        panelZombieRugbyLayout.setVerticalGroup(
            panelZombieRugbyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 98, Short.MAX_VALUE)
        );

        jLabel1.setText("Tipos de zombies que te van a atacar:");

        textoCantidadTiposZombies.setText("0");

        botonEmpezar.setText("Empezar a elegir");
        botonEmpezar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonEmpezarMouseClicked(evt);
            }
        });

        areaZombiesElegidos.setColumns(20);
        areaZombiesElegidos.setFont(new java.awt.Font("Ubuntu", 1, 15));
        areaZombiesElegidos.setRows(5);
        areaZombiesElegidos.setText("Zombies elegidos:");
        areaZombiesElegidos.setEnabled(false);
        scrollAreaElegirZombies.setViewportView(areaZombiesElegidos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelZombieNormal, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelZombieCono, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelZombieCubo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelZombiePeriodico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelZombiePuerta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelZombieLanza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelZombieLoco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelZombieGlobo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelZombieMinero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelZombieGigante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelZombieCatapulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelZombieYeti, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelZombieRugby, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(textoCantidadTiposZombies, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botonEmpezar))
                            .addComponent(jLabel1))))
                .addGap(11, 11, 11)
                .addComponent(scrollAreaElegirZombies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(93, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollAreaElegirZombies, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(panelZombieLanza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panelZombiePuerta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panelZombiePeriodico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panelZombieCubo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panelZombieCono, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panelZombieNormal, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelZombieCatapulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panelZombieLoco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panelZombieGlobo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panelZombieMinero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panelZombieGigante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelZombieRugby, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panelZombieYeti, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(botonEmpezar)
                                    .addComponent(textoCantidadTiposZombies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        
    }//GEN-LAST:event_formWindowClosed

    private void botonEmpezarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonEmpezarMouseClicked
        if( Integer.parseInt(textoCantidadTiposZombies.getText()) <= 0 ||
            Integer.parseInt(textoCantidadTiposZombies.getText()) > 13 )
            JOptionPane.showMessageDialog(this, "¡El número ha de estar entre 1 y 13!");
        else
        {
            cantidadZombies = Integer.parseInt(textoCantidadTiposZombies.getText());
            botonEmpezar.setEnabled(false);
            arrayZombies.clear();
        }
    }//GEN-LAST:event_botonEmpezarMouseClicked

    private void panelZombieNormalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelZombieNormalMouseClicked
        boolean zombieYaElegido = false;
        ListIterator i = arrayZombies.listIterator();
        while (!zombieYaElegido && i.hasNext())
        {
            zombie aux = ((zombie)i.next());
            zombieYaElegido = aux.getNombre().equals("Zombie");
        }
        if( zombieYaElegido )
            JOptionPane.showMessageDialog(this, "El Zombie normal ya está elegido");
        else
        {
            if( cantidadZombies > 0 && numeroZombiesElegidos < cantidadZombies )
            {
                numeroZombiesElegidos++;
                JOptionPane.showMessageDialog(this, "Elegido el Zombie normal");
                zombie zombieNormal = new zombie("Zombie", 20, 30);
                arrayZombies.add(zombieNormal);
                areaZombiesElegidos.setText(areaZombiesElegidos.getText()
                        + "\n"
                        + numeroZombiesElegidos
                        + ""
                        + ".- Zombie Normal");
                repaint();
            }
        }
    }//GEN-LAST:event_panelZombieNormalMouseClicked

    private void panelZombieConoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelZombieConoMouseClicked
        boolean zombieYaElegido = false;
        ListIterator i = arrayZombies.listIterator();
        while (!zombieYaElegido && i.hasNext())
        {
            zombie aux = ((zombie)i.next());
            zombieYaElegido = aux.getNombre().equals("ZombieCaracono");
        }
        if( zombieYaElegido )
            JOptionPane.showMessageDialog(this, "El Zombie caracono ya está elegido");
        else
        {
            if( cantidadZombies > 0 && numeroZombiesElegidos < cantidadZombies )
            {
                numeroZombiesElegidos++;
                JOptionPane.showMessageDialog(this, "Elegido el Zombie caracono");
                zombie zombieCaracono = new zombie("ZombieCaracono", 20, 40);
                arrayZombies.add(zombieCaracono);
                areaZombiesElegidos.setText(areaZombiesElegidos.getText()
                        + "\n"
                        + numeroZombiesElegidos
                        + ""
                        + ".- Zombie Caracono");
                repaint();
            }
        }
    }//GEN-LAST:event_panelZombieConoMouseClicked

    private void panelZombieCuboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelZombieCuboMouseClicked
        boolean zombieYaElegido = false;
        ListIterator i = arrayZombies.listIterator();
        while (!zombieYaElegido && i.hasNext())
        {
            zombie aux = ((zombie)i.next());
            zombieYaElegido = aux.getNombre().equals("ZombieCubililetero");
        }
        if( zombieYaElegido )
            JOptionPane.showMessageDialog(this, "El Zombie cubuliletero ya está elegido");
        else
        {
            if( cantidadZombies > 0 && numeroZombiesElegidos < cantidadZombies )
            {
                numeroZombiesElegidos++;
                JOptionPane.showMessageDialog(this, "Elegido el Zombie cubililetero");
                zombie zombieCubililetero = new zombie("ZombieCubililetero", 20, 50);
                arrayZombies.add(zombieCubililetero);
                areaZombiesElegidos.setText(areaZombiesElegidos.getText()
                        + "\n"
                        + numeroZombiesElegidos
                        + ""
                        + ".- Zombie Cubililetero");
                repaint();
            }
        }
    }//GEN-LAST:event_panelZombieCuboMouseClicked

    private void panelZombiePeriodicoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelZombiePeriodicoMouseClicked
        boolean zombieYaElegido = false;
        ListIterator i = arrayZombies.listIterator();
        while (!zombieYaElegido && i.hasNext())
        {
            zombie aux = ((zombie)i.next());
            zombieYaElegido = aux.getNombre().equals("ZombieLector");
        }
        if( zombieYaElegido )
            JOptionPane.showMessageDialog(this, "El Zombie lector ya está elegido");
        else
        {
            if( cantidadZombies > 0 && numeroZombiesElegidos < cantidadZombies )
            {
                numeroZombiesElegidos++;
                JOptionPane.showMessageDialog(this, "Elegido el Zombie lector");
                zombie zombieLector = new zombie("ZombieLector", 20, 35);
                arrayZombies.add(zombieLector);
                areaZombiesElegidos.setText(areaZombiesElegidos.getText()
                        + "\n"
                        + numeroZombiesElegidos
                        + ""
                        + ".- Zombie Lector");
                repaint();
            }
        }
    }//GEN-LAST:event_panelZombiePeriodicoMouseClicked

    private void panelZombiePuertaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelZombiePuertaMouseClicked
        boolean zombieYaElegido = false;
        ListIterator i = arrayZombies.listIterator();
        while (!zombieYaElegido && i.hasNext())
        {
            zombie aux = ((zombie)i.next());
            zombieYaElegido = aux.getNombre().equals("ZombiePortero");
        }
        if( zombieYaElegido )
            JOptionPane.showMessageDialog(this, "El Zombie portero ya está elegido");
        else
        {
            if( cantidadZombies > 0 && numeroZombiesElegidos < cantidadZombies )
            {
                numeroZombiesElegidos++;
                JOptionPane.showMessageDialog(this, "Elegido el Zombie portero");
                zombie zombiePortero = new zombie("ZombiePortero", 20, 45);
                arrayZombies.add(zombiePortero);
                areaZombiesElegidos.setText(areaZombiesElegidos.getText()
                        + "\n"
                        + numeroZombiesElegidos
                        + ""
                        + ".- Zombie Portero");
                repaint();
            }
        }
    }//GEN-LAST:event_panelZombiePuertaMouseClicked

    private void panelZombieLanzaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelZombieLanzaMouseClicked
        boolean zombieYaElegido = false;
        ListIterator i = arrayZombies.listIterator();
        while (!zombieYaElegido && i.hasNext())
        {
            zombie aux = ((zombie)i.next());
            zombieYaElegido = aux.getNombre().equals("ZombieSaltador");
        }
        if( zombieYaElegido )
            JOptionPane.showMessageDialog(this, "El Zombie saltador de pértiga ya está elegido");
        else
        {
            if( cantidadZombies > 0 && numeroZombiesElegidos < cantidadZombies )
            {
                numeroZombiesElegidos++;
                JOptionPane.showMessageDialog(this, "Elegido el Zombie saltador de pértiga");
                zombie zombieSaltador = new zombie("ZombieSaltador", 20, 30);
                arrayZombies.add(zombieSaltador);
                areaZombiesElegidos.setText(areaZombiesElegidos.getText()
                        + "\n"
                        + numeroZombiesElegidos
                        + ""
                        + ".- Zombie Saltador de pértiga");
                repaint();
            }
        }
    }//GEN-LAST:event_panelZombieLanzaMouseClicked

    private void panelZombieLocoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelZombieLocoMouseClicked
        boolean zombieYaElegido = false;
        ListIterator i = arrayZombies.listIterator();
        while (!zombieYaElegido && i.hasNext())
        {
            zombie aux = ((zombie)i.next());
            zombieYaElegido = aux.getNombre().equals("ZombieLoco");
        }
        if( zombieYaElegido )
            JOptionPane.showMessageDialog(this, "El Zombie con cajita ya está elegido");
        else
        {
            if( cantidadZombies > 0 && numeroZombiesElegidos < cantidadZombies )
            {
                numeroZombiesElegidos++;
                JOptionPane.showMessageDialog(this, "Elegido el Zombie con cajita");
                zombie zombieLoco = new zombie("ZombieLoco", 40, 30);
                arrayZombies.add(zombieLoco);
                areaZombiesElegidos.setText(areaZombiesElegidos.getText()
                        + "\n"
                        + numeroZombiesElegidos
                        + ""
                        + ".- Zombie con cajita");
                repaint();
            }
        }
    }//GEN-LAST:event_panelZombieLocoMouseClicked

    private void panelZombieGloboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelZombieGloboMouseClicked
        boolean zombieYaElegido = false;
        ListIterator i = arrayZombies.listIterator();
        while (!zombieYaElegido && i.hasNext())
        {
            zombie aux = ((zombie)i.next());
            zombieYaElegido = aux.getNombre().equals("ZombieGlobo");
        }
        if( zombieYaElegido )
            JOptionPane.showMessageDialog(this, "El Zombie con globo ya está elegido");
        else
        {
            if( cantidadZombies > 0 && numeroZombiesElegidos < cantidadZombies )
            {
                numeroZombiesElegidos++;
                JOptionPane.showMessageDialog(this, "Elegido el Zombie con globo");
                zombie zombieGlobo = new zombie("ZombieGlobo", 20, 30);
                arrayZombies.add(zombieGlobo);
                areaZombiesElegidos.setText(areaZombiesElegidos.getText()
                        + "\n"
                        + numeroZombiesElegidos
                        + ""
                        + ".- Zombie con globo");
                repaint();
            }
        }
    }//GEN-LAST:event_panelZombieGloboMouseClicked

    private void panelZombieRugbyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelZombieRugbyMouseClicked
        boolean zombieYaElegido = false;
        ListIterator i = arrayZombies.listIterator();
        while (!zombieYaElegido && i.hasNext())
        {
            zombie aux = ((zombie)i.next());
            zombieYaElegido = aux.getNombre().equals("ZombieDeportista");
        }
        if( zombieYaElegido )
            JOptionPane.showMessageDialog(this, "El Zombie deportista ya está elegido");
        else
        {
            if( cantidadZombies > 0 && numeroZombiesElegidos < cantidadZombies )
            {
                numeroZombiesElegidos++;
                JOptionPane.showMessageDialog(this, "Elegido el Zombie deportista");
                zombie zombieDeportista = new zombie("ZombieDeportista", 20, 60);
                arrayZombies.add(zombieDeportista);
                areaZombiesElegidos.setText(areaZombiesElegidos.getText()
                        + "\n"
                        + numeroZombiesElegidos
                        + ""
                        + ".- Zombie deportista");
                repaint();
            }
        }
    }//GEN-LAST:event_panelZombieRugbyMouseClicked

    private void panelZombieMineroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelZombieMineroMouseClicked
        boolean zombieYaElegido = false;
        ListIterator i = arrayZombies.listIterator();
        while (!zombieYaElegido && i.hasNext())
        {
            zombie aux = ((zombie)i.next());
            zombieYaElegido = aux.getNombre().equals("ZombieMinero");
        }
        if( zombieYaElegido )
            JOptionPane.showMessageDialog(this, "El Zombie picado ya está elegido");
        else
        {
            if( cantidadZombies > 0 && numeroZombiesElegidos < cantidadZombies )
            {
                numeroZombiesElegidos++;
                JOptionPane.showMessageDialog(this, "Elegido el Zombie picado");
                zombie zombieMinero = new zombie("ZombieMinero", 20, 30);
                arrayZombies.add(zombieMinero);
                areaZombiesElegidos.setText(areaZombiesElegidos.getText()
                        + "\n"
                        + numeroZombiesElegidos
                        + ""
                        + ".- Zombie picado");
                repaint();
            }
        }
    }//GEN-LAST:event_panelZombieMineroMouseClicked

    private void panelZombieGiganteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelZombieGiganteMouseClicked
        boolean zombieYaElegido = false;
        ListIterator i = arrayZombies.listIterator();
        while (!zombieYaElegido && i.hasNext())
        {
            zombie aux = ((zombie)i.next());
            zombieYaElegido = aux.getNombre().equals("Zombistein");
        }
        if( zombieYaElegido )
            JOptionPane.showMessageDialog(this, "El Zombistein ya está elegido");
        else
        {
            if( cantidadZombies > 0 && numeroZombiesElegidos < cantidadZombies )
            {
                numeroZombiesElegidos++;
                JOptionPane.showMessageDialog(this, "Elegido el Zombistein");
                zombie zombistein = new zombie("Zombistein", 100, 100);
                arrayZombies.add(zombistein);
                areaZombiesElegidos.setText(areaZombiesElegidos.getText()
                        + "\n"
                        + numeroZombiesElegidos
                        + ""
                        + ".- Zombistein");
                repaint();
            }
        }
    }//GEN-LAST:event_panelZombieGiganteMouseClicked

    private void panelZombieCatapultaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelZombieCatapultaMouseClicked
        boolean zombieYaElegido = false;
        ListIterator i = arrayZombies.listIterator();
        while (!zombieYaElegido && i.hasNext())
        {
            zombie aux = ((zombie)i.next());
            zombieYaElegido = aux.getNombre().equals("Zombipulta");
        }
        if( zombieYaElegido )
            JOptionPane.showMessageDialog(this, "El Zombipulta ya está elegido");
        else
        {
            if( cantidadZombies > 0 && numeroZombiesElegidos < cantidadZombies )
            {
                numeroZombiesElegidos++;
                JOptionPane.showMessageDialog(this, "Elegido el Zombipulta");
                zombie zombipulta = new zombie("Zombipulta", 25, 40);
                arrayZombies.add(zombipulta);
                areaZombiesElegidos.setText(areaZombiesElegidos.getText()
                        + "\n"
                        + numeroZombiesElegidos
                        + ""
                        + ".- Zombipulta");
                repaint();
            }
        }
    }//GEN-LAST:event_panelZombieCatapultaMouseClicked

    private void panelZombieYetiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelZombieYetiMouseClicked
        boolean zombieYaElegido = false;
        ListIterator i = arrayZombies.listIterator();
        while (!zombieYaElegido && i.hasNext())
        {
            zombie aux = ((zombie)i.next());
            zombieYaElegido = aux.getNombre().equals("ZombieYeti");
        }
        if( zombieYaElegido )
            JOptionPane.showMessageDialog(this, "El Zombie Yeti ya está elegido");
        else
        {
            if( cantidadZombies > 0 && numeroZombiesElegidos < cantidadZombies )
            {
                numeroZombiesElegidos++;
                JOptionPane.showMessageDialog(this, "Elegido el Zombie Yeti");
                zombie zombieYeti = new zombie("ZombieYeti", 80, 60);
                arrayZombies.add(zombieYeti);
                areaZombiesElegidos.setText(areaZombiesElegidos.getText()
                        + "\n"
                        + numeroZombiesElegidos
                        + ""
                        + ".- Zombie Yeti");
                repaint();
            }
        }
    }//GEN-LAST:event_panelZombieYetiMouseClicked

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new elegirZombies().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaZombiesElegidos;
    private javax.swing.JButton botonEmpezar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel panelZombieCatapulta;
    private javax.swing.JPanel panelZombieCono;
    private javax.swing.JPanel panelZombieCubo;
    private javax.swing.JPanel panelZombieGigante;
    private javax.swing.JPanel panelZombieGlobo;
    private javax.swing.JPanel panelZombieLanza;
    private javax.swing.JPanel panelZombieLoco;
    private javax.swing.JPanel panelZombieMinero;
    private javax.swing.JPanel panelZombieNormal;
    private javax.swing.JPanel panelZombiePeriodico;
    private javax.swing.JPanel panelZombiePuerta;
    private javax.swing.JPanel panelZombieRugby;
    private javax.swing.JPanel panelZombieYeti;
    private javax.swing.JScrollPane scrollAreaElegirZombies;
    private javax.swing.JTextField textoCantidadTiposZombies;
    // End of variables declaration//GEN-END:variables

}
